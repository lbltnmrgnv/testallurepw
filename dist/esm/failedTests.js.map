{"version":3,"file":"failedTests.js","names":["fs","path","filePath","resolve","__dirname","loadState","data","readFileSync","state","JSON","parse","failedTests","error","saveFailedTests","tests","writeFileSync","stringify","getFailedTests"],"sources":["../../src/failedTests.ts"],"sourcesContent":["// myModule.ts\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface State {\n    failedTests: string[];\n}\n\nconst filePath = path.resolve(__dirname, 'expectedlyFailedTests.json');\n\nfunction loadState(): string[] {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const state: State = JSON.parse(data);\n        return state.failedTests || []; // Возвращаем пустой массив, если что-то пошло не так\n    } catch (error) {\n        return []; // Возвращаем пустой массив в случае ошибки\n    }\n}\n\nexport function saveFailedTests(tests: string[]): void {\n    const state: State = { failedTests: tests };\n    fs.writeFileSync(filePath, JSON.stringify(state));\n}\n\nlet failedTests: string[] = loadState(); // В результате у вас всегда будет массив, даже если пустой\n\nexport function getFailedTests(): string[] {\n    return failedTests;\n}\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,OAAO,KAAKC,IAAI,MAAM,MAAM;AAM5B,IAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAO,CAACC,SAAS,EAAE,4BAA4B,CAAC;AAEtE,SAASC,SAASA,CAAA,EAAa;EAC3B,IAAI;IACA,IAAMC,IAAI,GAAGN,EAAE,CAACO,YAAY,CAACL,QAAQ,EAAE,MAAM,CAAC;IAC9C,IAAMM,KAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;IACrC,OAAOE,KAAK,CAACG,WAAW,IAAI,EAAE,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO,EAAE,CAAC,CAAC;EACf;AACJ;AAEA,OAAO,SAASC,eAAeA,CAACC,KAAe,EAAQ;EACnD,IAAMN,KAAY,GAAG;IAAEG,WAAW,EAAEG;EAAM,CAAC;EAC3Cd,EAAE,CAACe,aAAa,CAACb,QAAQ,EAAEO,IAAI,CAACO,SAAS,CAACR,KAAK,CAAC,CAAC;AACrD;AAEA,IAAIG,WAAqB,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;;AAEzC,OAAO,SAASY,cAAcA,CAAA,EAAa;EACvC,OAAON,WAAW;AACtB","ignoreList":[]}