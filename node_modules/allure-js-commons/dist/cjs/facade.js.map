{"version":3,"file":"facade.js","names":["_model","require","_runtime","_utils","_NoopTestRuntime","callRuntimeMethod","method","_len","arguments","length","args","Array","_key","runtime","getGlobalTestRuntimeWithAutoconfig","isPromise","then","testRuntime","label","name","value","exports","labels","_len2","labelsList","_key2","link","url","type","links","_len3","linksList","_key3","parameter","options","description","markdown","descriptionHtml","html","displayName","addFailedTests","tests","historyId","testCaseId","attachment","content","opts","contentType","attachmentPath","path","stepContext","mode","logStep","status","error","step","body","issue","LinkType","ISSUE","tms","TMS","allureId","LabelName","ALLURE_ID","epic","EPIC","feature","FEATURE","story","STORY","suite","SUITE","parentSuite","PARENT_SUITE","subSuite","SUB_SUITE","owner","OWNER","severity","SEVERITY","layer","LAYER","tag","TAG","tags","_len4","tagsList","_key4","map","expectedlyFailedTests","noopRuntime"],"sources":["../../src/facade.ts"],"sourcesContent":["import type { Status } from \"./model.js\";\nimport { type ContentType } from \"./model.js\";\nimport { type AttachmentOptions, type Label, type Link, type ParameterMode, type ParameterOptions } from \"./model.js\";\nimport { LabelName, LinkType } from \"./model.js\";\nimport { getGlobalTestRuntimeWithAutoconfig } from \"./sdk/runtime/runtime.js\";\nimport type { TestRuntime } from \"./sdk/runtime/types.js\";\nimport { isPromise } from \"./sdk/utils.js\";\nimport {noopRuntime} from \"./sdk/runtime/NoopTestRuntime\";\n\nconst callRuntimeMethod = <\n  T extends keyof TestRuntime,\n  S extends Parameters<TestRuntime[T]>,\n  R extends ReturnType<TestRuntime[T]>,\n>(\n  method: T,\n  ...args: S\n): R => {\n  const runtime = getGlobalTestRuntimeWithAutoconfig();\n\n  if (!isPromise(runtime)) {\n    // @ts-ignore\n    return runtime[method](...args);\n  }\n\n  return runtime.then((testRuntime) => {\n    // @ts-ignore\n    return testRuntime[method](...args);\n  }) as R;\n};\n\nexport const label = (name: LabelName | string, value: string) => {\n  return callRuntimeMethod(\"labels\", { name, value });\n};\n\nexport const labels = (...labelsList: Label[]) => {\n  return callRuntimeMethod(\"labels\", ...labelsList);\n};\n\nexport const link = (url: string, name?: string, type?: LinkType | string) => {\n  return callRuntimeMethod(\"links\", { url, type, name });\n};\n\nexport const links = (...linksList: Link[]) => {\n  return callRuntimeMethod(\"links\", ...linksList);\n};\n\nexport const parameter = (name: string, value: string, options?: ParameterOptions) => {\n  return callRuntimeMethod(\"parameter\", name, value, options);\n};\n\nexport const description = (markdown: string) => {\n  return callRuntimeMethod(\"description\", markdown);\n};\n\nexport const descriptionHtml = (html: string) => {\n  return callRuntimeMethod(\"descriptionHtml\", html);\n};\n\nexport const displayName = (name: string) => {\n  return callRuntimeMethod(\"displayName\", name);\n};\n\nexport const addFailedTests = (tests) => {\n  return callRuntimeMethod('addFailedTests', tests)\n}\n\nexport const historyId = (value: string) => {\n  return callRuntimeMethod(\"historyId\", value);\n};\n\nexport const testCaseId = (value: string) => {\n  return callRuntimeMethod(\"testCaseId\", value);\n};\n\nexport const attachment = (\n  name: string,\n  content: Buffer | string,\n  options: ContentType | string | AttachmentOptions,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachment\", name, content, opts);\n};\n\nexport const attachmentPath = (\n  name: string,\n  path: string,\n  options: ContentType | string | Omit<AttachmentOptions, \"encoding\">,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachmentFromPath\", name, path, opts);\n};\n\nexport type StepContext = {\n  displayName: (name: string) => void | PromiseLike<void>;\n  parameter: (name: string, value: string, mode?: ParameterMode) => void | PromiseLike<void>;\n};\n\nconst stepContext: () => StepContext = () => ({\n  displayName: (name: string) => {\n    return callRuntimeMethod(\"stepDisplayName\", name);\n  },\n  parameter: (name, value, mode?) => {\n    return callRuntimeMethod(\"stepParameter\", name, value, mode);\n  },\n});\n\nexport const logStep = (name: string, status?: Status, error?: Error): PromiseLike<void> => {\n  return callRuntimeMethod(\"logStep\", name, status, error);\n};\n\nexport const step = <T = void>(name: string, body: (context: StepContext) => T | PromiseLike<T>): PromiseLike<T> => {\n  return callRuntimeMethod(\"step\", name, () => body(stepContext()));\n};\n\nexport const issue = (url: string, name?: string) => link(url, name, LinkType.ISSUE);\n\nexport const tms = (url: string, name?: string) => link(url, name, LinkType.TMS);\n\nexport const allureId = (value: string) => label(LabelName.ALLURE_ID, value);\n\nexport const epic = (name: string) => label(LabelName.EPIC, name);\n\nexport const feature = (name: string) => label(LabelName.FEATURE, name);\n\nexport const story = (name: string) => label(LabelName.STORY, name);\n\nexport const suite = (name: string) => label(LabelName.SUITE, name);\n\nexport const parentSuite = (name: string) => label(LabelName.PARENT_SUITE, name);\n\nexport const subSuite = (name: string) => label(LabelName.SUB_SUITE, name);\n\nexport const owner = (name: string) => label(LabelName.OWNER, name);\n\nexport const severity = (name: string) => label(LabelName.SEVERITY, name);\n\nexport const layer = (name: string) => label(LabelName.LAYER, name);\n\nexport const tag = (name: string) => label(LabelName.TAG, name);\n\nexport const tags = (...tagsList: string[]) => {\n  return callRuntimeMethod(\"labels\", ...tagsList.map((value) => ({ name: LabelName.TAG, value })));\n};\n\n\nexport const expectedlyFailedTests = noopRuntime.expectedlyFailedTests"],"mappings":"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","ignoreList":[]}